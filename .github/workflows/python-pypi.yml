# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name:  Python PyPi


on:
  workflow_run:
    workflows: ["Generate OpenAPI"]
    branches: [ "main" ]
    types:
      - completed


jobs:
  ### TEST ######################################################
  test:
    runs-on: ubuntu-latest
    env:
      GITHUB_BUILD: "false"
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Read variable.env and set variable
      id: read-version
      run: |
        cat variable.env >> "$GITHUB_ENV"
        echo "CI_PROJECT_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest>=7.1.3 pytest-cov>=2.8.1 pytest-randomly>=3.12.0 pytest-xdist flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest --cov=$PYPI_NAME

    - name: Test summary
      run: |
        echo "Test pass"
        echo "GITHUB_BUILD=true" >> $GITHUB_ENV

    outputs:
      github_build: ${{ env.GITHUB_BUILD }}   

  ### BUILD ######################################################
  build:
    runs-on: ubuntu-latest
    needs: test
    env:
      GITHUB_CHANGES: "false"
    if:  ${{ needs.test.outputs.github_build == 'true' }}
    permissions:
      actions: write
      contents: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Read variable.env and set variable
      id: read-version
      run: |
        cat variable.env >> "$GITHUB_ENV"
        echo "CI_PROJECT_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -U setuptools wheel build

    - name: Cleanup dist/ folder before build
      run: rm -rf dist/

    - name: Build package
      run: |
        formatted_requirements=$(sed 's/.*/"&"/; $!s/$/, /' requirements.txt | tr -d '\n')
        sed -i.bak "s/__inject_requirements__/${formatted_requirements}/" setup.py
        python -m build

    - name: Count generated files in dist/ folder
      id: file_count
      run: |
          echo "GITHUB_CHANGES=false" >> $GITHUB_ENV
          FILE_COUNT=$(ls -1 $CI_PROJECT_DIR/dist/ | wc -l)
          echo "Number of files in dist folder: $FILE_COUNT"
          if [ $((FILE_COUNT)) -gt 0 ]; then
            echo "New dist/ file generated."
            ls -l $CI_PROJECT_DIR/dist
            echo "GITHUB_CHANGES=true" >> $GITHUB_ENV
          else
            echo "No new files generated."
            exit 0
          fi

    - name: Commit changes
      if: env.GITHUB_CHANGES == 'true'
      run: |
          git config --local user.name actions-user
          git config --local user.email "github@nchekwa.com"
          git status
          git add dist/*
          git commit -am "GitHub Actions PyPi Update $(date +"%Y-%m-%d %H:%M:%S")"
          git push -f origin main

    outputs:
      github_changes: ${{ env.GITHUB_CHANGES }}

  ### PUBLISH ######################################################
  publish:
    runs-on: ubuntu-latest
    needs: build
    if:  ${{ needs.build.outputs.github_changes == 'true' }}
    permissions:
      contents: read
      id-token: write 
       # IMPORTANT: (id-token) this permission is mandatory for trusted publishing
       
    steps:
    - uses: actions/checkout@v4

    - name: Read variable.env and set variable
      id: read-version
      run: |
        cat variable.env >> "$GITHUB_ENV"
        echo "CI_PROJECT_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV

    - name: Publish package
      uses: pypa/gh-action-pypi-publish@v1.8.11
      with:
        skip-existing: true
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Create Tag
      uses: actions/github-script@v7
      env:
        PYPI_VERSION: ${{env.PYPI_VERSION}}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |        
          github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/v${{env.PYPI_VERSION}}`,
              sha: context.sha
          })