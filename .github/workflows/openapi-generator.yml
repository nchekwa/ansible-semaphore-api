name: Generate OpenAPI

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'variable.env'
      - '.github/workflows/openapi-generator.yml'

permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read

env:
  BRANCH: dev

jobs:
  ### Generate OpenAPI ######################################################
  generate_openapi:
    runs-on: ubuntu-latest
    env:
      GITHUB_CHANGES: "false"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Read variable.env and set variable
        id: read-version
        run: |
          cat variable.env >> "$GITHUB_ENV"
          echo "CI_PROJECT_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Set up OpenAPI Generator
        run: |
          wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.1.0/openapi-generator-cli-7.1.0.jar -O /tmp/openapi-generator-cli.jar

      - name: OpenAPI Download Ansible Semaphore API-Docs
        run: |
          OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
          REPOSITORY=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          cd /tmp/
          curl "https://converter.swagger.io/api/convert?url=https://raw.githubusercontent.com/ansible-semaphore/semaphore/v$SEMAPHORE_VERSION/api-docs.yml" -H "Accept: application/yaml" -o api-docs.yml
          
      - name: OpenAPI Extract Python Template
        run: |
          cd /tmp/ &&
          java -jar /tmp/openapi-generator-cli.jar author template \
            -g python \
            -o templates/python

      - name: Apply Patch on Python Template
        run: |
          patch -p1 /tmp/templates/python/api_client.mustache < $CI_PROJECT_DIR/patch/api_client.mustache.patch
          
      - name: OpenAPI Generate
        run: |
          cd /tmp/ &&
          java -jar /tmp/openapi-generator-cli.jar generate \
            -i api-docs.yml \
            -g python \
            -t templates/python \
            -o openapi \
            --package-name $PYPI_NAME \
            --git-repo-id $REPOSITORY \
            --git-user-id $OWNER
        
      - name: Update repository
        run: |
          cd $CI_PROJECT_DIR
          rm -fR $CI_PROJECT_DIR/$PYPI_NAME && cp -r /tmp/openapi/$PYPI_NAME $CI_PROJECT_DIR/
          rm -fR $CI_PROJECT_DIR/docs && cp -r /tmp/openapi/docs $CI_PROJECT_DIR/
          rm -fR $CI_PROJECT_DIR/test && cp -r /tmp/openapi/test $CI_PROJECT_DIR/
          cp /tmp/openapi/README.md $CI_PROJECT_DIR/README_OPENAPI.md
          ls -la $CI_PROJECT_DIR/
          #echo -e "include ../requirements.txt\ninclude py.typed" > $CI_PROJECT_DIR/$PYPI_NAME/MANIFEST.in

      - name: Check for changes
        id: check_changes
        run: |
          cd $CI_PROJECT_DIR
          echo "GITHUB_CHANGES=false" >> $GITHUB_ENV
          
          if git status --porcelain | grep -q '^??'; then
            echo "Git Status: Untracked files found. Adding them to the staging area."
            echo "GITHUB_CHANGES=true" >> $GITHUB_ENV
          elif git status --porcelain | grep -q '^\s*D'; then
            echo "Git Status: Deleted files found. Perform actions for deleted files."
            echo "GITHUB_CHANGES=true" >> $GITHUB_ENV
          else
            echo "Git Status: No untracked or deleted files."
          fi

          if ! git diff --quiet; then
              echo "Git Files Diff: Changes detected in some files, proceeding with commit."
              echo "GITHUB_CHANGES=true" >> $GITHUB_ENV
          else
              echo "Git Files Diff: No differences found between the working directory and the staging area."      
          fi

      - name: Commit changes
        if: env.GITHUB_CHANGES == 'true'
        run: |
          git config --local user.name actions-user
          git config --local user.email "github@nchekwa.com"
          git status
          git add --all
          git commit -am "GitHub Actions OpenAPI Update $(date +"%Y-%m-%d %H:%M:%S")"s
          git push -f

    outputs:
      github_changes: ${{ env.GITHUB_CHANGES }}

  ### TEST ######################################################
  test:
    runs-on: ubuntu-latest
    needs: generate_openapi
    #if:  ${{ needs.generate_openapi.outputs.github_changes == 'true' }}
    env:
      GITHUB_BUILD: "false"
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}
  
    - name: Read variable.env and set variable
      id: read-version
      run: |
        cat variable.env >> "$GITHUB_ENV"
        echo "CI_PROJECT_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest>=7.1.3 pytest-cov>=2.8.1 pytest-randomly>=3.12.0 pytest-xdist flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest --cov=$PYPI_NAME

    - name: Test summary
      run: |
        echo "Test pass"
        echo "GITHUB_BUILD=true" >> $GITHUB_ENV

    outputs:
      github_build: ${{ env.GITHUB_BUILD }}

  ### BUILD ######################################################
  build:
    runs-on: ubuntu-latest
    needs: test
    env:
      GITHUB_CHANGES: "false"
    if:  ${{ needs.test.outputs.github_build == 'true' }}
    permissions:
      actions: write
      contents: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Read variable.env and set variable
      id: read-version
      run: |
        cat variable.env >> "$GITHUB_ENV"
        echo "CI_PROJECT_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -U setuptools wheel build

    - name: Cleanup dist/ folder before build
      run: rm -rf dist/

    - name: Build package
      run: |
        formatted_requirements=$(sed 's/.*/"&"/; $!s/$/, /' requirements.txt | tr -d '\n')
        sed -i.bak "s/__inject_requirements__/${formatted_requirements}/" setup.py
        python -m build

    - name: Count generated files in dist/ folder
      id: file_count
      run: |
          echo "GITHUB_CHANGES=false" >> $GITHUB_ENV
          FILE_COUNT=$(ls -1 $CI_PROJECT_DIR/dist/ | wc -l)
          echo "Number of files in dist folder: $FILE_COUNT"
          if [ $((FILE_COUNT)) -gt 0 ]; then
            echo "New dist/ file generated."
            ls -l $CI_PROJECT_DIR/dist
            echo "GITHUB_CHANGES=true" >> $GITHUB_ENV
          else
            echo "No new files generated."
            exit 0
          fi

    - name: Commit changes
      if: env.GITHUB_CHANGES == 'true'
      run: |
          git config --local user.name actions-user
          git config --local user.email "github@nchekwa.com"
          git status
          git add dist/*
          git commit -am "GitHub Actions PyPi Update $(date +"%Y-%m-%d %H:%M:%S")"
          git push -f 

    outputs:
      github_changes: ${{ env.GITHUB_CHANGES }}