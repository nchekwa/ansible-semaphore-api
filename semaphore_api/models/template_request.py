# coding: utf-8

"""
    SEMAPHORE

    Semaphore API

    The version of the OpenAPI document: 2.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from semaphore_api.models.template_survey_var import TemplateSurveyVar
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TemplateRequest(BaseModel):
    """
    TemplateRequest
    """ # noqa: E501
    project_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    inventory_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    repository_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    environment_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    view_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    name: Optional[StrictStr] = None
    playbook: Optional[StrictStr] = None
    arguments: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    allow_override_args_in_task: Optional[StrictBool] = None
    limit: Optional[StrictStr] = None
    suppress_success_alerts: Optional[StrictBool] = None
    survey_vars: Optional[List[TemplateSurveyVar]] = None
    __properties: ClassVar[List[str]] = ["project_id", "inventory_id", "repository_id", "environment_id", "view_id", "name", "playbook", "arguments", "description", "allow_override_args_in_task", "limit", "suppress_success_alerts", "survey_vars"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in survey_vars (list)
        _items = []
        if self.survey_vars:
            for _item in self.survey_vars:
                if _item:
                    _items.append(_item.to_dict())
            _dict['survey_vars'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "inventory_id": obj.get("inventory_id"),
            "repository_id": obj.get("repository_id"),
            "environment_id": obj.get("environment_id"),
            "view_id": obj.get("view_id"),
            "name": obj.get("name"),
            "playbook": obj.get("playbook"),
            "arguments": obj.get("arguments"),
            "description": obj.get("description"),
            "allow_override_args_in_task": obj.get("allow_override_args_in_task"),
            "limit": obj.get("limit"),
            "suppress_success_alerts": obj.get("suppress_success_alerts"),
            "survey_vars": [TemplateSurveyVar.from_dict(_item) for _item in obj.get("survey_vars")] if obj.get("survey_vars") is not None else None
        })
        return _obj


